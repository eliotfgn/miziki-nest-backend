generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  username           String
  password           String
  profilePic         String?
  role               Role       @default(USER)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  createdPlaylists   Playlist[] @relation("createdPlaylists")
  followingPlaylists Playlist[] @relation("followingPlaylists")
}

model Tag {
  id      BigInt  @id @default(autoincrement())
  name    String  @unique
  trackId String?
  Track   Track?  @relation(fields: [trackId], references: [id])
  albums  Album[] @relation("AlbumToTag")
}

model Artist {
  id             String   @id @default(uuid())
  name           String
  bio            String
  profilePic     String
  followersCount Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  albums         Album[]  @relation("AlbumToArtist")
  tracks         Track[]  @relation("ArtistToTrack")
}

model Album {
  id          String    @id @default(uuid())
  title       String
  cover       String
  label       String
  releaseDate DateTime
  likesCount  BigInt    @default(0)
  type        AlbumType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tracks      Track[]
  artists     Artist[]  @relation("AlbumToArtist")
  tags        Tag[]     @relation("AlbumToTag")
}

model Track {
  id           String   @id @default(uuid())
  title        String
  duration     Int
  audio        String
  likesCount   Int      @default(0)
  streamsCount Int?     @default(0)
  albumId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tags         Tag[]
  album        Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  artists      Artist[] @relation("ArtistToTrack")
}

model Playlist {
  id          String   @id @default(uuid())
  title       String
  description String?
  cover       String?
  likesCount  Int      @default(0)
  isPrivate   Boolean  @default(true)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation("createdPlaylists", fields: [authorId], references: [id])
  followers   User[]   @relation("followingPlaylists")
}

enum Role {
  USER
  ARTIST
}

enum AlbumType {
  ALBUM
  SINGLE
  EP
}
